(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react')) :
    typeof define === 'function' && define.amd ? define(['exports', 'react'], factory) :
    (global = global || self, factory(global.SpinnersReact = {}, global.React));
}(this, (function (exports, React) { 'use strict';

    React = React && Object.prototype.hasOwnProperty.call(React, 'default') ? React['default'] : React;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    var defaultProps = {
        speed: 100,
        still: false,
        thickness: 100,
    };
    var secondaryColorDefaultProps = __assign(__assign({}, defaultProps), { secondaryColor: 'rgba(0,0,0,0.44)' });

    var defaultProps$1 = {
        color: '#38ad48',
        enabled: true,
        size: 50,
        style: {},
    };
    var normalizeSize = function (size) { return (parseFloat(size.toString()).toString() === size.toString()
        ? size + "px"
        : size.toString()); };
    var withSharedProps = function (Component) {
        var Wrapper = function (props) {
            var color = props.color, enabled = props.enabled, size = props.size, style = props.style, otherProps = __rest(props, ["color", "enabled", "size", "style"]);
            var componentProps = __assign(__assign({}, otherProps), { style: __assign({ color: color, overflow: 'visible', width: normalizeSize(size) }, style) });
            if (!enabled)
                return null;
            return React.createElement(Component, __assign({}, componentProps));
        };
        Wrapper.defaultProps = defaultProps$1;
        return Wrapper;
    };

    function styleInject(css, ref) {
      if ( ref === void 0 ) ref = {};
      var insertAt = ref.insertAt;

      if (!css || typeof document === 'undefined') { return; }

      var head = document.head || document.getElementsByTagName('head')[0];
      var style = document.createElement('style');
      style.type = 'text/css';

      if (insertAt === 'top') {
        if (head.firstChild) {
          head.insertBefore(style, head.firstChild);
        } else {
          head.appendChild(style);
        }
      } else {
        head.appendChild(style);
      }

      if (style.styleSheet) {
        style.styleSheet.cssText = css;
      } else {
        style.appendChild(document.createTextNode(css));
      }
    }

    var css_248z = "@keyframes spinners-react-round-outlined{35%,65%{r:2px;stroke-width:4}}";
    styleInject(css_248z);

    var animations = [
        {
            r: 2,
        },
        {
            name: 'spinners-react-round-outlined',
            r: 14,
        },
        {
            name: 'spinners-react-round-outlined',
            r: 28,
        },
    ];
    var Component = function (_a) {
        var speed = _a.speed, still = _a.still, thickness = _a.thickness, svgProps = __rest(_a, ["speed", "still", "thickness"]);
        var strokeWidth = 3 * (thickness / 100);
        return (React.createElement("svg", __assign({ fill: "none" }, svgProps, { viewBox: "0 0 66 66" }), animations.map(function (animation, i) { return (React.createElement("circle", { key: "spinner-round-outlined-r" + animation.r, cx: "33", cy: "33", fill: "none", r: animation.r, stroke: "currentColor", strokeWidth: i ? strokeWidth : 4, style: animation.name && !still
                ? { animation: animation.name + " " + 140 / speed + "s ease-in-out infinite" }
                : {} })); })));
    };
    Component.defaultProps = defaultProps;
    var SpinnerRoundOutlined = withSharedProps(Component);

    exports.SpinnerRoundOutlined = SpinnerRoundOutlined;

})));
